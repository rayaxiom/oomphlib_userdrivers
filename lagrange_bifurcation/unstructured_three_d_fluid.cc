//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.90. August 3, 2009.
//LIC// 
//LIC// Copyright (C) 2006-2009 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
// Driver code for a simple unstructured fluid problem using a mesh
// generated from an input file generated by the 3d mesh generator
// tetgen


//Generic routines
#include "generic.h"
#include "constitutive.h"
#include "navier_stokes.h"

// Get the mesh
#include "meshes/tetgen_mesh.h"
#include "meshes/brick_from_tet_mesh.h" 

// My own header
#include "./../rayheader.h"



using namespace std;
using namespace oomph;

// Alias the namespace for convenience.
namespace NSPP = NavierStokesProblemParameters;
namespace LPH = LagrangianPreconditionerHelpers;
namespace BL = BifurcationLagrange;

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////


//======start_problem_class===========================================
/// Unstructured fluid problem
//====================================================================
template<class ELEMENT>
class UnstructuredFluidProblem : public Problem
{

public:

 /// Constructor: 
 UnstructuredFluidProblem();

 /// Destructor (empty)
 ~UnstructuredFluidProblem(){}

 /// Doc the solution
 void doc_solution(const unsigned& nt);

 void actions_before_implicit_timestep()
 {
   if(!NSPP::Steady_state)
   {
     const unsigned ibound = Inflow_boundary_id[0];
     const unsigned num_nod = Bulk_mesh_pt->nboundary_node(ibound);
     for (unsigned inod = 0; inod < num_nod; inod++) 
     {
       Node* nod_pt = Bulk_mesh_pt->boundary_node_pt(ibound,inod);
       const double x = nod_pt->x(0);
       const double y = nod_pt->x(1);

       const double time = time_pt()->time();

       const double uz = BL::get_prescribed_inflow(time,x,y);

       nod_pt->set_value(0,0.0);
       nod_pt->set_value(1,0.0);
       nod_pt->set_value(2,uz);
     }
   }
 }
 
 /// Update the problem specs before solve. 
 void actions_before_newton_solve()
 {
   if(NSPP::Steady_state)
   {
     // Set the inflow, this is boundary 0
     const unsigned ibound = Inflow_boundary_id[0];
     const unsigned num_nod = Bulk_mesh_pt->nboundary_node(ibound);
     for (unsigned inod = 0; inod < num_nod; inod++) 
     {
       Node*  nod_pt = Bulk_mesh_pt->boundary_node_pt(ibound,inod);
       const double x = nod_pt->x(0);
       const double y = nod_pt->x(1);
       //const double z = nod_pt->x(2);

       // x and y are in the range [-1,1]
       const double uz = BL::get_prescribed_inflow(x,y);

       nod_pt->set_value(0,0.0);
       nod_pt->set_value(1,0.0);
       nod_pt->set_value(2,uz);
     }
   }
 }

 void actions_before_distribute()
 {

   if(NSPP::Distribute_problem)
   {
     GenericProblemSetup::delete_flux_elements(Surface_mesh_pt);
     rebuild_global_mesh();
   }
 }

 void actions_after_distribute()
 {
   if(NSPP::Distribute_problem)
   {
     const unsigned n_outflow_boundary = Outflow_boundary_id.size();
     for (unsigned ibound = 0; ibound < n_outflow_boundary; ibound++) 
     {
       const unsigned current_bound = Outflow_boundary_id[ibound];
       create_parall_outflow_lagrange_elements(current_bound,
           Tangent_direction,
           Bulk_mesh_pt,
           Surface_mesh_pt);
     }
     rebuild_global_mesh();
   }
 }

 void unsteady_run();


 void create_parall_outflow_lagrange_elements(const unsigned &b,
                                              Vector<double> &tangent_direction,
                                              Mesh* const &bulk_mesh_pt,
                                              Mesh* const &surface_mesh_pt);
 //private:

 /// Bulk fluid mesh
// TetgenMesh<ELEMENT>* Bulk_mesh_pt;
 Mesh* Bulk_mesh_pt;

 Mesh* Surface_mesh_pt;

 Vector<double> Tangent_direction;

 Preconditioner* Prec_pt;

 IterativeLinearSolver* Solver_pt;

 DocLinearSolverInfo* Doc_linear_solver_info_pt;

 /// \short IDs of fluid mesh boundaries along which inflow boundary conditions
 /// are applied
 Vector<unsigned> Inflow_boundary_id;

// /// \short IDs of fluid mesh boundaries along which inflow boundary conditions
// /// are applied
 Vector<unsigned> Outflow_boundary_id;

};



//==========start_constructor=============================================
/// Constructor for unstructured 3D fluid problem
//========================================================================
  template<class ELEMENT>
UnstructuredFluidProblem<ELEMENT>::UnstructuredFluidProblem()
{ 

  // Add a new time stepper if not doing steady state.
  if(!NSPP::Steady_state)
  {
    add_time_stepper_pt(new BDF<2>);
  }


  //Create fluid bulk mesh, sub-dividing "corner" elements
  string mesh_folder = "tetgen_files/" + BL::Mesh_folder_str +"/";

  string node_file_name=mesh_folder+"fsi_bifurcation_fluid.1.node";
  string element_file_name=mesh_folder+"fsi_bifurcation_fluid.1.ele";
  string face_file_name=mesh_folder+"fsi_bifurcation_fluid.1.face";
  bool split_corner_elements=true;

  // Check if we want the tetrahedral or hexahedral
  if(NSPP::Mesh_type == NSPP::MeshType_TETRAHEDRAL)
  {
    if(NSPP::Steady_state)
    {
      Bulk_mesh_pt =  new TetgenMesh<ELEMENT>(node_file_name,
          element_file_name,
          face_file_name,
          split_corner_elements);
    }
    else
    {
      Bulk_mesh_pt =  new TetgenMesh<ELEMENT>(node_file_name,
          element_file_name,
          face_file_name,
          split_corner_elements,
          time_stepper_pt());
    }
  }
  else if(NSPP::Mesh_type == NSPP::MeshType_HEXAHEDRAL)
  {
    if(NSPP::Steady_state)
    {
      Bulk_mesh_pt = new BrickFromTetMesh<ELEMENT>(node_file_name,
          element_file_name,
          face_file_name,
          split_corner_elements);
    }
    else
    {
      Bulk_mesh_pt = new BrickFromTetMesh<ELEMENT>(node_file_name,
          element_file_name,
          face_file_name,
          split_corner_elements,
          time_stepper_pt());
    }
  }
  else
  {
        std::ostringstream err_msg;
        err_msg << "Please set --mesh_type" << std::endl;

        throw OomphLibError(err_msg.str(),
            OOMPH_CURRENT_FUNCTION,
            OOMPH_EXCEPTION_LOCATION);
  }

  oomph_info << "Calling setup_boundary_element_info()" << std::endl; 
  // Find elements next to boundaries
  Bulk_mesh_pt->setup_boundary_element_info();
  oomph_info << "Done setup_boundary_element_info()" << std::endl; 


  // The following corresponds to the boundaries as specified by
  // facets in the tetgen input:

  Inflow_boundary_id.resize(1);
  Inflow_boundary_id[0] = 0;

  Outflow_boundary_id.resize(2);
  Outflow_boundary_id[0] = 1;
  Outflow_boundary_id[1] = 2;


  // First pin all boundary nodes, then we unpin those on the outflow boundary.
  const unsigned num_bound = Bulk_mesh_pt->nboundary();
  for (unsigned ibound = 0; ibound < num_bound; ibound++) 
  {
    const unsigned num_nod = Bulk_mesh_pt->nboundary_node(ibound);
    for (unsigned inod = 0; inod < num_nod; inod++) 
    {
      // Loop over velocity nodes
      const unsigned n_velocity_nodes = 3;
      for (unsigned iv = 0; iv < n_velocity_nodes; iv++) 
      {
        // Locally cache the node, since we use it more than once.
        Node* nod_pt = Bulk_mesh_pt->boundary_node_pt(ibound,inod);

        // Pin and (just to be safe!) set the value to zero.
        nod_pt->pin(iv);
        nod_pt->set_value(iv,0.0);
      } // for - loop over the velocity nodes.
    } // for - loop over the nodes
  } // for - loop over all the boundaries

  // Unpin the nodes at the outflow boundary, but only the node which
  // is on a single boundary!
  // Outflow boundaries are one and two
  const unsigned n_outflow_boundary = Outflow_boundary_id.size();

  for (unsigned ibound = 0; ibound < n_outflow_boundary; ibound++)
  {
    const unsigned current_bound = Outflow_boundary_id[ibound];

    const unsigned num_nod = Bulk_mesh_pt->nboundary_node(current_bound);

    for (unsigned inod = 0; inod < num_nod; inod++) 
    {
      Node* nod_pt = Bulk_mesh_pt->boundary_node_pt(current_bound,inod);

      // Only free if node is ONLY on a single boundary
      std::set<unsigned>*bnd_pt=0;
      nod_pt->get_boundaries_pt(bnd_pt);
      if (bnd_pt != 0) 
      {
        if (bnd_pt->size()<2) 
        {
          nod_pt->unpin(0);
          nod_pt->unpin(1);
          nod_pt->unpin(2);
        } // if there is less than two boundaries
      } // if the boundary pointer is not null
    } // for - loop over nodes
  } // for - loop over outflow boundaries


  // Create the surface mesh for the parallel outflow elements
  // on boundary 1 and 2. To be safe, we give a general direction for the
  // tangent vector. Recall that now we have two outflow faces which
  // planes intersect. This means that the automatically calculated tangent
  // vector may switch (even within an element if the face is unfortunately
  // aligned with one of the axis).
  Tangent_direction.resize(3,0);
  Tangent_direction[0] = 0;
  Tangent_direction[1] = 1;
  Tangent_direction[2] = 0;

  Surface_mesh_pt = new Mesh;
  for (unsigned ibound = 0; ibound < n_outflow_boundary; ibound++) 
  {
    const unsigned current_bound = Outflow_boundary_id[ibound];
    create_parall_outflow_lagrange_elements(current_bound,
        Tangent_direction,
        Bulk_mesh_pt,
        Surface_mesh_pt);
  }

  // Combine all the sub meshes.
  add_sub_mesh(Bulk_mesh_pt);
  add_sub_mesh(Surface_mesh_pt);

  // Build the global mesh
  build_global_mesh();

  // Set up equation numbering scheme
  oomph_info << "Number of equations: " << assign_eqn_numbers() << std::endl;

//  // Complete the build of the fluid elements so they are fully functional
//  //----------------------------------------------------------------------
  const unsigned n_element = Bulk_mesh_pt->nelement();
//  for(unsigned e=0;e<n_element;e++)
//  {
//    // Upcast from GeneralisedElement to the present element
//    ELEMENT* el_pt = dynamic_cast<ELEMENT*>(Bulk_mesh_pt->element_pt(e));
//
//    //Set the Reynolds number
//    el_pt->re_pt() = &NSPP::Rey;
//  } 

  // Loop over the elements to set up element-specific 
  // things that cannot be handled by constructor
  for(unsigned e=0;e<n_element;e++)
  {
    // Upcast from GeneralisedElement to the present element
    NavierStokesEquations<3>* el_pt = 
      dynamic_cast<NavierStokesEquations<3>*>(Bulk_mesh_pt->element_pt(e));

    //Set the Reynolds number
    el_pt->re_pt() = &NSPP::Rey;
    el_pt->re_st_pt() = &NSPP::Rey;
  } // end loop over elements



  if(NSPP::Solver_type != NSPP::Solver_type_DIRECT_SOLVE)
  {
    Vector<Mesh*> mesh_pt(2,0);
      mesh_pt[0] = Bulk_mesh_pt;
      mesh_pt[1] = Surface_mesh_pt;

    LPH::Mesh_pt = mesh_pt;
    LPH::Problem_pt = this;
    Prec_pt = LPH::get_preconditioner();
  }

 const double solver_tol = 1.0e-6;
 const double newton_tol = 1.0e-6;
 GenericProblemSetup::setup_solver(NSPP::Max_solver_iteration,
                                   solver_tol,newton_tol,
                                   NSPP::Solver_type,this,Prec_pt);


} // end constructor

//============start_of_fluid_traction_elements==============================
/// Create fluid traction elements 
//=======================================================================
template<class ELEMENT>
void UnstructuredFluidProblem<ELEMENT>::create_parall_outflow_lagrange_elements
(const unsigned &b, Vector<double>& tangent_direction,
 Mesh* const &bulk_mesh_pt, Mesh* const &surface_mesh_pt)
{
 // How many bulk elements are adjacent to boundary b?
 unsigned n_element = bulk_mesh_pt->nboundary_element(b);
   
 // Loop over the bulk elements adjacent to boundary b
 for(unsigned e=0;e<n_element;e++)
  {
   // Get pointer to the bulk element that is adjacent to boundary b
   ELEMENT* bulk_elem_pt = dynamic_cast<ELEMENT*>(
    bulk_mesh_pt->boundary_element_pt(b,e));
     
   //What is the index of the face of the element e along boundary b
   int face_index = bulk_mesh_pt->face_index_at_boundary(b,e);

   {
    // Build the corresponding impose_impenetrability_element
    ImposeParallelOutflowElement<ELEMENT>* flux_element_pt = new
     ImposeParallelOutflowElement<ELEMENT>(bulk_elem_pt,
                                           face_index);

    flux_element_pt->set_tangent_direction(&tangent_direction);
    surface_mesh_pt->add_element_pt(flux_element_pt);

    // Loop over the nodes
    unsigned nnod=flux_element_pt->nnode();
    for (unsigned j=0;j<nnod;j++)
     {
      Node* nod_pt = flux_element_pt->node_pt(j);
           
      // Determine which outflow boundary it is, left or right?
           
      if (  (nod_pt->is_on_boundary(7))||(nod_pt->is_on_boundary(8))
            ||(nod_pt->is_on_boundary(9))||(nod_pt->is_on_boundary(10))
            ||(nod_pt->is_on_boundary(11))||(nod_pt->is_on_boundary(12))
            ||(nod_pt->is_on_boundary(13))||(nod_pt->is_on_boundary(14)))
       {
        // How many nodal values were used by the "bulk" element
        // that originally created this node?
        unsigned n_bulk_value=flux_element_pt->nbulk_value(j);

        // The remaining ones are Lagrange multipliers and we pin them.
        unsigned nval=nod_pt->nvalue();
        for (unsigned j=n_bulk_value;j<nval;j++)
         {
          nod_pt->pin(j);
         }
       }
     }
   }
  }
} // end of create_parall_outflow_lagrange_elements


  template<class ELEMENT>
void UnstructuredFluidProblem <ELEMENT>::unsteady_run()
{

  //Set value of dt
  const double dt = NSPP::Delta_t;


  // Initialise all history values for an impulsive start
  assign_initial_values_impulsive(dt);
  oomph_info << "IC = impulsive start" << std::endl;

  //Now do many timesteps
  unsigned ntsteps = NSPP::Time_end / dt;
  oomph_info << "NTIMESTEP IS: " << ntsteps << std::endl; 


  // Doc initial condition
  if(NSPP::Doc_soln)
  {
        doc_solution(0); 
  }

  // increment counter

  //Loop over the timesteps
  for(unsigned t=1;t<=ntsteps;t++)
  {
    oomph_info << "TIMESTEP: " << t << std::endl;

    //Take one fixed timestep
    unsteady_newton_solve(dt);

    //Output the time
    oomph_info << "Time is now " << time_pt()->time() << std::endl;

    if(NSPP::Doc_soln)
    {
      // Doc solution
          doc_solution(t); 
    }
  }
} // end of unsteady run

//========================================================================
/// Doc the solution
//========================================================================
template<class ELEMENT>
void UnstructuredFluidProblem<ELEMENT>::doc_solution(const unsigned&nt)
{ 

  std::ofstream some_file;
  std::stringstream filename;
  filename << NSPP::Soln_dir_str<<"/"<<NSPP::Label_str <<"t"<<nt<<".dat";

  // Number of plot points
  unsigned npts=5;

  // Output solution
  some_file.open(filename.str().c_str());
  Bulk_mesh_pt->output(some_file,npts);
  some_file.close();


// ofstream some_file;
// char filename[100];
//
// // Number of plot points
// unsigned npts;
// npts=5;
//  
// 
// // Output fluid solution
// sprintf(filename,"%s/fluid_soln%i.dat",doc_info.directory().c_str(),
//         doc_info.number());
// some_file.open(filename);
// Bulk_mesh_pt->output(some_file,npts);
// some_file.close();
}

std::string create_label()
{
  
  std::string label = BL::prob_str()
                      + NSPP::create_label() 
                      + LPH::create_label() 
                      + BL::mesh_area_str();
  return label;
}



//=============start_main=================================================
/// Demonstrate how to solve an unstructured 3D fluids problem
//========================================================================
int main(int argc, char **argv)
{
#ifdef OOMPH_HAS_MPI
  // Initialise MPI
  MPI_Helpers::init(argc,argv);
#endif

  // Problem dimension.
  const unsigned dim = 3;

  // Set up doc info - used to store information on solver and iteration time.
  DocLinearSolverInfo doc_linear_solver_info;
  // Again, pass this to the NSPP and LPH
  NSPP::Doc_linear_solver_info_pt = &doc_linear_solver_info;
  LPH::Doc_linear_solver_info_pt = &doc_linear_solver_info;

  // Set the Label_pt
  LPH::Label_str_pt = &NSPP::Label_str;
  LPH::Vis_pt = &NSPP::Vis;
  BL::Prob_id_pt = &NSPP::Prob_id;
  BL::Time_start_pt = &NSPP::Time_start;
  BL::Time_end_pt = &NSPP::Time_end;

  NSPP::Time_start = 0.0;
  NSPP::Time_end = 1.0; 



  // Store command line arguments
  CommandLineArgs::setup(argc,argv);

  NSPP::setup_commandline_flags();
  LPH::setup_commandline_flags();
  BL::setup_commandline_flags();

  // Parse the above flags.
  CommandLineArgs::parse_and_assign();
  CommandLineArgs::doc_specified_flags(); 



  ////////////////////////////////////////////////////
  // Now set up the flags/parameters for the problem//
  ////////////////////////////////////////////////////

  // dim = 3
  NSPP::generic_problem_setup(dim);
  LPH::generic_setup();
  BL::generic_setup();



  if(NSPP::Mesh_type == NSPP::MeshType_TETRAHEDRAL)
  {
    //Set up the problem
    UnstructuredFluidProblem<TTaylorHoodElement<3> > problem;

  if(NSPP::Distribute_problem)
  {
    problem.distribute();
  }

  NSPP::Label_str = create_label();

  time_t rawtime;
  time(&rawtime);

  std::cout << "RAYDOING: "
    << NSPP::Label_str
    << " on " << ctime(&rawtime) << std::endl;


    // Solve the problem
    if(NSPP::Steady_state)
    {
      problem.newton_solve();

      //Output solution
      problem.doc_solution(0);
    }
    else
    {
      problem.unsteady_run();
    }
  }
  else if(NSPP::Mesh_type == NSPP::MeshType_HEXAHEDRAL)
  {
    //Set up the problem
    UnstructuredFluidProblem<QTaylorHoodElement<3> > problem;


  if(NSPP::Distribute_problem)
  {
    problem.distribute();
  }

  NSPP::Label_str = create_label();

  time_t rawtime;
  time(&rawtime);

  std::cout << "RAYDOING: "
    << NSPP::Label_str
    << " on " << ctime(&rawtime) << std::endl;


    if(NSPP::Steady_state)
    {
      // Solve the problem
      problem.newton_solve();

      //Output solution
      problem.doc_solution(0);
    }
    else
    {
      problem.unsteady_run();
    }
  }


#ifdef OOMPH_HAS_MPI
  // finalize MPI
  MPI_Helpers::finalize();
#endif
  return(EXIT_SUCCESS); 

} // end_of_main




